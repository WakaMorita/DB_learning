SUKKIRI=2800YEN


【1章】
--INSERT INTO 家計簿 values ('2013-02-25','居住費','3月の家賃',0,85000);

--Update 家計簿 set 出金額=90000 where 日付='2013-02-25';

--select * from 家計簿 where 入金額=50000;

--delete from 家計簿 where 出金額>4000;

--update 家計簿 set メモ='カファラテを購入' where 日付='2013-02-03';


【2章】
--CREATE TABLE 都道府県 ( コード CHAR(2),地域 VARCHAR(10),都道府県 VARCHAR(10),県庁所在地 VARCHAR(10),面積 INTEGER );
--insert into 都道府県 values ('1','東北','青森','青森',9645);

select コード
		,地域
		,都道府県
		,県庁所在地
		,面積
FROM 都道府県;

select *
FROM 都道府県;

select 地域 as area
		,都道府県 as pref
FROM 都道府県;

insert into 都道府県 values('26','近畿','京都',null,4613);
insert into 都道府県 values('37','四国','香川','高松',1876);
insert into 都道府県 values('40',null,'福岡','福岡',null);

update 都道府県 set 県庁所在地='京都' where コード='26';
update 都道府県 set 地域='九州',面積=4976 where コード='40';
delete from 都道府県 where コード='26';

【3章】
create table 気象観測 (
	月 Integer
	,降水量 Integer
	,最高気温 Integer
	,最低気温 Integer
	,湿度 Integer
);

insert into 気象観測 values(1,70,16,-0,74);
insert into 気象観測 values(2,74,17,-2,71);
insert into 気象観測 values(3,120,23,-0,68);
insert into 気象観測 values(4,118,25,3,59);
insert into 気象観測 values(5,123,30,9,65);
insert into 気象観測 values(6,218,33,14,71);
insert into 気象観測 values(7,403,35,19,82);
insert into 気象観測 values(8,57,38,22,68);
insert into 気象観測 values(9,122,35,15,76);
insert into 気象観測 values(10,272,28,6,75);
insert into 気象観測 values(11,33,26,4,75);
insert into 気象観測 values(12,15,16,-1,70);

select * from 気象観測 where 月 = 6;
select * from 気象観測 where 月 <> 6;
select * from 気象観測 where 降水量<100;
select * from 気象観測 where 降水量>200;
select * from 気象観測 where 最高気温>=30;
select * from 気象観測 where 最低気温<=0;
select * from 気象観測 where 月 IN(3,5,7);
select * from 気象観測 where 月 NOT IN(3,5,7);
select * from 気象観測 where 降水量 <= 100 and 湿度 < 50;
select * from 気象観測 where 最低気温 < 5 or 最高気温 > 35;
select * from 気象観測 where 湿度 Between 60 and 79;
select * from 気象観測 where 降水量 is NULL or 最高気温 is NULL or 最低気温 is NULL or 湿度 is NULL;


select * from 都道府県 where 都道府県 like '%川';
select * from 都道府県 where 都道府県 like '%島%';
select * from 都道府県 where 都道府県 like '愛%';
select * from 都道府県 where 都道府県 = 県庁所在地;
select * from 都道府県 where 都道府県 <> 県庁所在地;


create table 成績 (学籍番号 char(4), 学生名 varchar(20), 法学 integer, 経済学 integer, 哲学 integer,情報理論 integer, 外国語 integer ,総合成績 char(1));
select * from 成績;
insert into 成績 values('S001','織田　信長',77,55,80,75,93,Null);
insert into 成績 values('A002','豊臣　秀吉',64,69,70,0,59,Null);
insert into 成績 values('E003','徳川　家康',80,83,85,90,79,Null);
update 成績 set 法学=85, 哲学=67 where 学籍番号='S001';
update 成績 set 外国語=81 where 学籍番号 IN ('A002','E003');
update 成績 set 総合成績='A' where 法学>=80 and 経済学>=80 and 哲学>=80 and 情報理論>=80 and 外国語>=80
update 成績 set 総合成績='B' where (法学>=80 or 外国語>=80) and (経済学>=80 or 哲学>=80) AND 総合成績 is null;
update 成績 set 総合成績='D' where 法学<50 and 経済学<50 and 哲学<50 and 情報理論<50 and 外国語<50 AND 総合成績 is null
update 成績 set 総合成績='C' where 総合成績 is null;
delete from 成績 where 法学=0 or 経済学=0 or 哲学=0 or 情報理論=0 or 外国語=0;

【4】
select * from 注文履歴 order by 注文番号,注文枝番;
select distinct 商品名 from 注文履歴 where 日付>='2012-01-01' and 日付<='2012-01-31' order by 商品名;
select 商品名,単価 from 注文履歴 where 分類='1' order by 単価 limit 3;
select 商品名,単価 from 注文履歴 where 分類='2' order by 単価 desc limit 1 offset 1;
SELECT 日付,商品名,単価,数量,注文金額,日付 FROM 注文履歴 WHERE 分類='3' AND 数量>=2 ORDER BY 日付,数量 DESC;
select 分類,商品名,サイズ,単価 from 注文履歴 where 分類='1'
union
select 分類,商品名,null,単価 from 注文履歴 where 分類='2'
union
select 分類,商品名,null,単価 from 注文履歴 where 分類='3' 
order by 分類,商品名;


select * from 奇数
union
select * from 偶数;
select * from 整数
except
select * from 偶数;
select * from 整数
intersect
select * from 偶数;
select * from 奇数
intersect
select * from 偶数;


【5】
5-1-1
update 試験結果 set 午後1=平均点*4-(午前+午後2+論述) where 受験者id='SW1046';
update 試験結果 set 論述=68*4-(午前+午後1+午後2) where 受験者id='SW1350';
update 試験結果 set 午前=平均点*4-(午後1+午後2+論述) where 受験者id='SW1877';
5-1-2
select 受験者id from 試験結果 as 合格者id where 午前>=60 and 午後1+午後2>=120 and 論述/平均点*4>=0.3;
5-2-1
select right(メールアドレス,2) from 回答者;
update 回答者 set 国名 = case right(メールアドレス,2) when 'jp' then '日本'
												when 'uk' then 'イギリス'
												when 'cn' then '中国'
												when 'fr' then 'フランス'
												when 'vn' then 'ベトナム'
												end;
5-2-2
select trim(メールアドレス)
		,case when 20<=年齢 and 年齢<=29 then '20代:'
					when 30<=年齢 and 年齢<=39 then '30代:'
					when 40<=年齢 and 年齢<=49 then '40代:'
					when 50<=年齢 and 年齢<=59 then '50代:'
					end
					|| 
		case 性別 when 'F' then '女性'
					when 'M' then '男性'
					end as 属性
from 回答者;

5-3-1
update 受注 set 文字数 = length(trim(文字));
5-3-2
select 受注日
		,受注ID
		,文字数
		,case 書体コード when '1' then 'ブロック体'
						when '2' then '筆記体'
						when '3' then '草書体'
						else 'ブロック体'
						end as 書体名
		,case 書体コード when '1' then '100円'
						when '2' then '150円'
						when '3' then '200円'
						else '100円'
						end as 単価
		,case when cast(文字数 as integer)>10 then '500円'
					else '0円'
					end as 特別加工料
from 受注 
order by 受注日,受注ID;
5-3-3
update 受注 set 文字=replace(文字,' ','★') where 受注ID = '113';


【6】
6-1-1
select sum(降水量) as 年間降水量
		, avg(最高気温) as 年間平均最高気温
		, avg(最低気温) as 年間平均最低気温
from 都市別気象観測;
6-1-2
select sum(降水量) as 年間降水量
		,avg(最高気温) as 年間平均最高気温
		,avg(最低気温) as 年間平均最低気温
from 都市別気象観測
group by 都市名
having 都市名='東京';
6-1-3
select 都市名
		,sum(降水量) as 年間降水量
		,min(最高気温) as 最も低い最高気温
		,max(最低気温) as 最も高い最低気温
from 都市別気象観測
group by 都市名;
6-1-4
select 月
		,sum(降水量) as 降水量
		,avg(最高気温) as 最高気温
		,avg(最低気温) as 最低気温
from 都市別気象観測
group by 月;
6-1-5
select 都市名
		,max(最高気温)
from 都市別気象観測
group by 都市名
having max(最高気温)>=38;
6-1-6
select 都市名
		,min(最低気温)
from 都市別気象観測
group by 都市名
having min(最低気温)<=-10;
6-2-1
select count(社員名) as 入室中社員数
from 入退室管理
where 退室 is null;
6-2-2
select 社員名 
		,count(社員名) as 入室回数
from 入退室管理
group by 社員名
order by 入室回数 desc;
6-2-3
select case 事由区分 when '1' then 'メンテナンス'
					when '2' then 'リリース作業'
					when '3' then '障害対応'
					when '9' then 'その他'
					end as 事由区分
		,count(事由区分) as 入室回数
from 入退室管理
group by 事由区分
order by 入室回数 desc;
6-2-4
select 社員名
		,count(社員名) as 入室回数 
from 入退室管理
group by 社員名
having count(社員名)>=10;
6-2-5
SELECT 日付
		, COUNT(社員名) AS 対応社員数
FROM 入退室管理
WHERE 事由区分 = '3'
GROUP BY 日付


【7】
7-3-1
insert into 頭数集計
select 飼育県
		,count(飼育県) as 頭数
		from 個体識別 group by 飼育県;
7-3-2
select 飼育県 as 都道府県
		,個体識別番号
		,case 雌雄コード when '1' then '雄'
							when '2' then '雌'
							end as 雌雄
from 個体識別
where 飼育県 in (select 飼育県 from 頭数集計 order by 頭数 desc limit 3);
7-3-3
select 個体識別番号
		,case 品種コード when '01' then '乳用種'
						when '02' then '肉用種'
						when '03' then '交雑種'
						end as 品種
		,出生日
		,母牛番号
from 個体識別
where 母牛番号 in (select 個体識別番号 from 個体識別 where 品種コード='01');


【8】
8-2-1
select 社員番号
		,社員.名前
		,部署.名前 as 部署名
from 社員
join 部署
on 社員.部署id=部署.部署id;
8-2-2
select main.社員番号
		,main.名前
		,boss.名前
from 社員 as main
left join 社員 as boss
on main.上司id=boss.社員番号;
8-2-3
select 社員番号
		,社員.名前
		,部署.名前 as 部署名
		,支店.名前 as 勤務地
from 社員
join 部署
on 社員.部署id=部署.部署id
join 支店
on 社員.勤務地id=支店.支店id;
8-2-4
select 支店.支店id as 支店コード
		,支店.名前 as 支店名
		,社員.名前 as 支店長名
		,社員数.社員数
from 支店
left join 社員
on 支店.支店長id=社員.社員番号
left join (select 勤務地id,count(勤務地id) as 社員数 from 社員 group by 勤務地id) as 社員数
on 支店.支店id=社員数.勤務地id;
8-2-5
select 社員.社員番号
		,社員.名前
		,本人支店.名前 as 本人勤務地
		,上司支店.名前 as 上司勤務地
from 社員
join 支店 as 本人支店
on 社員.勤務地id=本人支店.支店id
join 社員 as 上司
on 社員.上司id=上司.社員番号
join 支店 as 上司支店
on 社員.勤務地id=上司支店.支店id
where 本人支店.名前<>上司支店.名前;

【10】
10-2
CREATE TABLE 学部 (
  ID    CHAR(1)			PRIMARY KEY,      -- 学部を一意に特定する文字
  名前   VARCHAR(20)		UNIQUE NOT NULL,  -- 学部の名前（必須、重複不可）
  備考   VARCHAR(100)		DEFAULT '特になし' NOT NULL  -- 特にない場合は、'特になし'を設定
);
10-3
CREATE TABLE 学生 (
  学籍番号 CHAR(8)     PRIMARY KEY,
  名前     VARCHAR(30) NOT NULL,
  生年月日 DATE        NOT NULL, 
  血液型   CHAR(2)     CHECK (
                        血液型 IN ('A ', 'B ', 'O ', 'AB') OR
                        血液型 IS NULL
                       ),
  学部ID   CHAR(1)     REFERENCES 学部(ID)
);
10-5
BEGIN;
UPDATE 学生 SET 学部ID = 'K'
 WHERE 学部ID = 'R';
DELETE FROM 学部
 WHERE ID = 'R';
COMMIT;


【11】
11-2-2
CREATE VIEW 学部名付き学生一覧 AS
SELECT S.学籍番号, S.名前, S.生年月日, S.血液型,
       S.学部ID, B.名前 AS 学部名
  FROM 学生 AS S
  JOIN 学部 AS B
    ON S.学部ID = B.ID
11-2-3
INSERT INTO 学生
  (学籍番号, 名前, 生年月日, 血液型, 学部ID, 登録順)
VALUES
  ('B1101022', '古島 進', '1993-02-12', 'A', 'K', ISTD.NEXTVAL)
  

*要注意
count*とcount(列名)はnullの扱いが違う。
not in,<>any条件に一つでもnullがあると結果がすべてnullになってしまう(is not null条件を追加する。もしくはcoalesceでnullを置き換える癖をつけておくことでミスが起きにくい。)
副問い合わせはスカラー,ベクター，マトリックスの3パターン
相関副問い合わせ(繰り返し副問い合わせが働くので負荷大)
結合条件の非等価結合(＝以外)は負荷が大きい
自動コミットモードに気を付ける(DBMSツールによって違う)
トランザクション分離は基本read committed(状況によって変更)明示的なロックも可能
ダーティリード,反復不能読み取り,ファントムリード
truncate tableはDD(Lロールバックできない,高速)
シーケンスはロールバックされても進んでしまう
採番ではmaxを使うのはよくない(ロックによるパフォーマンスの低下、不変性の崩壊)
